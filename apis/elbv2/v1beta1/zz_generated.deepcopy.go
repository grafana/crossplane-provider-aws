//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckInitParameters) DeepCopyInto(out *HealthCheckInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthyThreshold != nil {
		in, out := &in.HealthyThreshold, &out.HealthyThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.UnhealthyThreshold != nil {
		in, out := &in.UnhealthyThreshold, &out.UnhealthyThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckInitParameters.
func (in *HealthCheckInitParameters) DeepCopy() *HealthCheckInitParameters {
	if in == nil {
		return nil
	}
	out := new(HealthCheckInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckObservation) DeepCopyInto(out *HealthCheckObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthyThreshold != nil {
		in, out := &in.HealthyThreshold, &out.HealthyThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.UnhealthyThreshold != nil {
		in, out := &in.UnhealthyThreshold, &out.UnhealthyThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckObservation.
func (in *HealthCheckObservation) DeepCopy() *HealthCheckObservation {
	if in == nil {
		return nil
	}
	out := new(HealthCheckObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckParameters) DeepCopyInto(out *HealthCheckParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthyThreshold != nil {
		in, out := &in.HealthyThreshold, &out.HealthyThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Matcher != nil {
		in, out := &in.Matcher, &out.Matcher
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.UnhealthyThreshold != nil {
		in, out := &in.UnhealthyThreshold, &out.UnhealthyThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckParameters.
func (in *HealthCheckParameters) DeepCopy() *HealthCheckParameters {
	if in == nil {
		return nil
	}
	out := new(HealthCheckParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroup) DeepCopyInto(out *LBTargetGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroup.
func (in *LBTargetGroup) DeepCopy() *LBTargetGroup {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LBTargetGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupInitParameters) DeepCopyInto(out *LBTargetGroupInitParameters) {
	*out = *in
	if in.ConnectionTermination != nil {
		in, out := &in.ConnectionTermination, &out.ConnectionTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeregistrationDelay != nil {
		in, out := &in.DeregistrationDelay, &out.DeregistrationDelay
		*out = new(string)
		**out = **in
	}
	if in.HealthCheck != nil {
		in, out := &in.HealthCheck, &out.HealthCheck
		*out = make([]HealthCheckInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPAddressType != nil {
		in, out := &in.IPAddressType, &out.IPAddressType
		*out = new(string)
		**out = **in
	}
	if in.LambdaMultiValueHeadersEnabled != nil {
		in, out := &in.LambdaMultiValueHeadersEnabled, &out.LambdaMultiValueHeadersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LoadBalancingAlgorithmType != nil {
		in, out := &in.LoadBalancingAlgorithmType, &out.LoadBalancingAlgorithmType
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancingCrossZoneEnabled != nil {
		in, out := &in.LoadBalancingCrossZoneEnabled, &out.LoadBalancingCrossZoneEnabled
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PreserveClientIP != nil {
		in, out := &in.PreserveClientIP, &out.PreserveClientIP
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ProtocolVersion != nil {
		in, out := &in.ProtocolVersion, &out.ProtocolVersion
		*out = new(string)
		**out = **in
	}
	if in.ProxyProtocolV2 != nil {
		in, out := &in.ProxyProtocolV2, &out.ProxyProtocolV2
		*out = new(bool)
		**out = **in
	}
	if in.SlowStart != nil {
		in, out := &in.SlowStart, &out.SlowStart
		*out = new(float64)
		**out = **in
	}
	if in.Stickiness != nil {
		in, out := &in.Stickiness, &out.Stickiness
		*out = make([]StickinessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetFailover != nil {
		in, out := &in.TargetFailover, &out.TargetFailover
		*out = make([]TargetFailoverInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetType != nil {
		in, out := &in.TargetType, &out.TargetType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupInitParameters.
func (in *LBTargetGroupInitParameters) DeepCopy() *LBTargetGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupList) DeepCopyInto(out *LBTargetGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LBTargetGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupList.
func (in *LBTargetGroupList) DeepCopy() *LBTargetGroupList {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LBTargetGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupObservation) DeepCopyInto(out *LBTargetGroupObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ArnSuffix != nil {
		in, out := &in.ArnSuffix, &out.ArnSuffix
		*out = new(string)
		**out = **in
	}
	if in.ConnectionTermination != nil {
		in, out := &in.ConnectionTermination, &out.ConnectionTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeregistrationDelay != nil {
		in, out := &in.DeregistrationDelay, &out.DeregistrationDelay
		*out = new(string)
		**out = **in
	}
	if in.HealthCheck != nil {
		in, out := &in.HealthCheck, &out.HealthCheck
		*out = make([]HealthCheckObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPAddressType != nil {
		in, out := &in.IPAddressType, &out.IPAddressType
		*out = new(string)
		**out = **in
	}
	if in.LambdaMultiValueHeadersEnabled != nil {
		in, out := &in.LambdaMultiValueHeadersEnabled, &out.LambdaMultiValueHeadersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LoadBalancingAlgorithmType != nil {
		in, out := &in.LoadBalancingAlgorithmType, &out.LoadBalancingAlgorithmType
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancingCrossZoneEnabled != nil {
		in, out := &in.LoadBalancingCrossZoneEnabled, &out.LoadBalancingCrossZoneEnabled
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PreserveClientIP != nil {
		in, out := &in.PreserveClientIP, &out.PreserveClientIP
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ProtocolVersion != nil {
		in, out := &in.ProtocolVersion, &out.ProtocolVersion
		*out = new(string)
		**out = **in
	}
	if in.ProxyProtocolV2 != nil {
		in, out := &in.ProxyProtocolV2, &out.ProxyProtocolV2
		*out = new(bool)
		**out = **in
	}
	if in.SlowStart != nil {
		in, out := &in.SlowStart, &out.SlowStart
		*out = new(float64)
		**out = **in
	}
	if in.Stickiness != nil {
		in, out := &in.Stickiness, &out.Stickiness
		*out = make([]StickinessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetFailover != nil {
		in, out := &in.TargetFailover, &out.TargetFailover
		*out = make([]TargetFailoverObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetType != nil {
		in, out := &in.TargetType, &out.TargetType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupObservation.
func (in *LBTargetGroupObservation) DeepCopy() *LBTargetGroupObservation {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupParameters) DeepCopyInto(out *LBTargetGroupParameters) {
	*out = *in
	if in.ConnectionTermination != nil {
		in, out := &in.ConnectionTermination, &out.ConnectionTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeregistrationDelay != nil {
		in, out := &in.DeregistrationDelay, &out.DeregistrationDelay
		*out = new(string)
		**out = **in
	}
	if in.HealthCheck != nil {
		in, out := &in.HealthCheck, &out.HealthCheck
		*out = make([]HealthCheckParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPAddressType != nil {
		in, out := &in.IPAddressType, &out.IPAddressType
		*out = new(string)
		**out = **in
	}
	if in.LambdaMultiValueHeadersEnabled != nil {
		in, out := &in.LambdaMultiValueHeadersEnabled, &out.LambdaMultiValueHeadersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LoadBalancingAlgorithmType != nil {
		in, out := &in.LoadBalancingAlgorithmType, &out.LoadBalancingAlgorithmType
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancingCrossZoneEnabled != nil {
		in, out := &in.LoadBalancingCrossZoneEnabled, &out.LoadBalancingCrossZoneEnabled
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PreserveClientIP != nil {
		in, out := &in.PreserveClientIP, &out.PreserveClientIP
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ProtocolVersion != nil {
		in, out := &in.ProtocolVersion, &out.ProtocolVersion
		*out = new(string)
		**out = **in
	}
	if in.ProxyProtocolV2 != nil {
		in, out := &in.ProxyProtocolV2, &out.ProxyProtocolV2
		*out = new(bool)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SlowStart != nil {
		in, out := &in.SlowStart, &out.SlowStart
		*out = new(float64)
		**out = **in
	}
	if in.Stickiness != nil {
		in, out := &in.Stickiness, &out.Stickiness
		*out = make([]StickinessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetFailover != nil {
		in, out := &in.TargetFailover, &out.TargetFailover
		*out = make([]TargetFailoverParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetType != nil {
		in, out := &in.TargetType, &out.TargetType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupParameters.
func (in *LBTargetGroupParameters) DeepCopy() *LBTargetGroupParameters {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupSpec) DeepCopyInto(out *LBTargetGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupSpec.
func (in *LBTargetGroupSpec) DeepCopy() *LBTargetGroupSpec {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LBTargetGroupStatus) DeepCopyInto(out *LBTargetGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LBTargetGroupStatus.
func (in *LBTargetGroupStatus) DeepCopy() *LBTargetGroupStatus {
	if in == nil {
		return nil
	}
	out := new(LBTargetGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StickinessInitParameters) DeepCopyInto(out *StickinessInitParameters) {
	*out = *in
	if in.CookieDuration != nil {
		in, out := &in.CookieDuration, &out.CookieDuration
		*out = new(float64)
		**out = **in
	}
	if in.CookieName != nil {
		in, out := &in.CookieName, &out.CookieName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StickinessInitParameters.
func (in *StickinessInitParameters) DeepCopy() *StickinessInitParameters {
	if in == nil {
		return nil
	}
	out := new(StickinessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StickinessObservation) DeepCopyInto(out *StickinessObservation) {
	*out = *in
	if in.CookieDuration != nil {
		in, out := &in.CookieDuration, &out.CookieDuration
		*out = new(float64)
		**out = **in
	}
	if in.CookieName != nil {
		in, out := &in.CookieName, &out.CookieName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StickinessObservation.
func (in *StickinessObservation) DeepCopy() *StickinessObservation {
	if in == nil {
		return nil
	}
	out := new(StickinessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StickinessParameters) DeepCopyInto(out *StickinessParameters) {
	*out = *in
	if in.CookieDuration != nil {
		in, out := &in.CookieDuration, &out.CookieDuration
		*out = new(float64)
		**out = **in
	}
	if in.CookieName != nil {
		in, out := &in.CookieName, &out.CookieName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StickinessParameters.
func (in *StickinessParameters) DeepCopy() *StickinessParameters {
	if in == nil {
		return nil
	}
	out := new(StickinessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetFailoverInitParameters) DeepCopyInto(out *TargetFailoverInitParameters) {
	*out = *in
	if in.OnDeregistration != nil {
		in, out := &in.OnDeregistration, &out.OnDeregistration
		*out = new(string)
		**out = **in
	}
	if in.OnUnhealthy != nil {
		in, out := &in.OnUnhealthy, &out.OnUnhealthy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetFailoverInitParameters.
func (in *TargetFailoverInitParameters) DeepCopy() *TargetFailoverInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetFailoverInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetFailoverObservation) DeepCopyInto(out *TargetFailoverObservation) {
	*out = *in
	if in.OnDeregistration != nil {
		in, out := &in.OnDeregistration, &out.OnDeregistration
		*out = new(string)
		**out = **in
	}
	if in.OnUnhealthy != nil {
		in, out := &in.OnUnhealthy, &out.OnUnhealthy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetFailoverObservation.
func (in *TargetFailoverObservation) DeepCopy() *TargetFailoverObservation {
	if in == nil {
		return nil
	}
	out := new(TargetFailoverObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetFailoverParameters) DeepCopyInto(out *TargetFailoverParameters) {
	*out = *in
	if in.OnDeregistration != nil {
		in, out := &in.OnDeregistration, &out.OnDeregistration
		*out = new(string)
		**out = **in
	}
	if in.OnUnhealthy != nil {
		in, out := &in.OnUnhealthy, &out.OnUnhealthy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetFailoverParameters.
func (in *TargetFailoverParameters) DeepCopy() *TargetFailoverParameters {
	if in == nil {
		return nil
	}
	out := new(TargetFailoverParameters)
	in.DeepCopyInto(out)
	return out
}
